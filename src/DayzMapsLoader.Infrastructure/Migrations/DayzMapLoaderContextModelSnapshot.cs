// <auto-generated />
using System;
using DayzMapsLoader.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DayzMapsLoader.Infrastructure.Migrations
{
    [DbContext(typeof(DayzMapLoaderContext))]
    partial class DayzMapLoaderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DayzMapsLoader.Domain.Entities.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Bohemia Interactive",
                            LastUpdate = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://www.bohemia.net",
                            Name = "Chernarus"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Bohemia Interactive",
                            LastUpdate = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://www.bohemia.net",
                            Name = "Livonia"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Sumrak",
                            LastUpdate = new DateTime(2022, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://steamcommunity.com/workshop/filedetails/?id=2289456201",
                            Name = "Namalsk"
                        },
                        new
                        {
                            Id = 4,
                            Author = "RonhillUltra",
                            LastUpdate = new DateTime(2021, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://steamcommunity.com/sharedfiles/filedetails/?id=2462896799",
                            Name = "Esseker"
                        },
                        new
                        {
                            Id = 5,
                            Author = "CypeRevenge",
                            LastUpdate = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://steamcommunity.com/sharedfiles/filedetails/?id=2563233742",
                            Name = "Takistan"
                        },
                        new
                        {
                            Id = 6,
                            Author = "KubeloLive",
                            LastUpdate = new DateTime(2022, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Link = "https://steamcommunity.com/sharedfiles/filedetails/?id=2415195639",
                            Name = "Banov"
                        });
                });

            modelBuilder.Entity("DayzMapsLoader.Domain.Entities.MapProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlQueryTemplate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MapProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Link = "https://xam.nu/",
                            Name = "Xam",
                            UrlQueryTemplate = "https://static.xam.nu/dayz/maps/{Map.NameForProvider}/{Map.Version}/{Map.MapTypeForProvider}/{Zoom}/{X}/{Y}.{Map.ImageExtension}"
                        },
                        new
                        {
                            Id = 2,
                            Link = "https://ginfo.gg/",
                            Name = "GInfo",
                            UrlQueryTemplate = "https://maps.izurvive.com/maps/{Map.NameForProvider}-{Map.MapTypeForProvider}/{Map.Version}/tiles/{Zoom}/{X}/{Y}.{Map.ImageExtension}"
                        });
                });

            modelBuilder.Entity("DayzMapsLoader.Domain.Entities.MapType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MapTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "topographic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "satellite"
                        });
                });

            modelBuilder.Entity("DayzMapsLoader.Domain.Entities.ProvidedMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFirstQuadrant")
                        .HasColumnType("bit");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("MapProviderId")
                        .HasColumnType("int");

                    b.Property<string>("MapTypeForProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MapTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaxMapLevel")
                        .HasColumnType("int");

                    b.Property<string>("NameForProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.HasIndex("MapProviderId");

                    b.HasIndex("MapTypeId");

                    b.ToTable("ProvidedMaps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 1,
                            MapProviderId = 1,
                            MapTypeForProvider = "topographic",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "chernarusplus",
                            Version = "1.17-1"
                        },
                        new
                        {
                            Id = 2,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 1,
                            MapProviderId = 1,
                            MapTypeForProvider = "satellite",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "chernarusplus",
                            Version = "1.17-1"
                        },
                        new
                        {
                            Id = 3,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 2,
                            MapProviderId = 1,
                            MapTypeForProvider = "topographic",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "livonia",
                            Version = "1.17-1"
                        },
                        new
                        {
                            Id = 4,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 2,
                            MapProviderId = 1,
                            MapTypeForProvider = "satellite",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "livonia",
                            Version = "1.17-1"
                        },
                        new
                        {
                            Id = 5,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 3,
                            MapProviderId = 1,
                            MapTypeForProvider = "topographic",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "namalsk",
                            Version = "04.19"
                        },
                        new
                        {
                            Id = 6,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 3,
                            MapProviderId = 1,
                            MapTypeForProvider = "satellite",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "namalsk",
                            Version = "04.19"
                        },
                        new
                        {
                            Id = 7,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 4,
                            MapProviderId = 1,
                            MapTypeForProvider = "topographic",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "esseker",
                            Version = "0.58"
                        },
                        new
                        {
                            Id = 8,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 4,
                            MapProviderId = 1,
                            MapTypeForProvider = "satellite",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "esseker",
                            Version = "0.58"
                        },
                        new
                        {
                            Id = 9,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 5,
                            MapProviderId = 1,
                            MapTypeForProvider = "topographic",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "takistanplus",
                            Version = "1.041"
                        },
                        new
                        {
                            Id = 10,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 5,
                            MapProviderId = 1,
                            MapTypeForProvider = "satellite",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "takistanplus",
                            Version = "1.041"
                        },
                        new
                        {
                            Id = 11,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 6,
                            MapProviderId = 1,
                            MapTypeForProvider = "topographic",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "banov",
                            Version = "04.19"
                        },
                        new
                        {
                            Id = 12,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = false,
                            MapId = 6,
                            MapProviderId = 1,
                            MapTypeForProvider = "satellite",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "banov",
                            Version = "04.04"
                        },
                        new
                        {
                            Id = 13,
                            ImageExtension = "webp",
                            IsFirstQuadrant = false,
                            MapId = 1,
                            MapProviderId = 2,
                            MapTypeForProvider = "Top",
                            MapTypeId = 1,
                            MaxMapLevel = 8,
                            NameForProvider = "ChernarusPlus",
                            Version = "1.19.0"
                        },
                        new
                        {
                            Id = 14,
                            ImageExtension = "webp",
                            IsFirstQuadrant = false,
                            MapId = 1,
                            MapProviderId = 2,
                            MapTypeForProvider = "Sat",
                            MapTypeId = 2,
                            MaxMapLevel = 8,
                            NameForProvider = "ChernarusPlus",
                            Version = "1.19.0"
                        },
                        new
                        {
                            Id = 15,
                            ImageExtension = "webp",
                            IsFirstQuadrant = false,
                            MapId = 2,
                            MapProviderId = 2,
                            MapTypeForProvider = "Top",
                            MapTypeId = 1,
                            MaxMapLevel = 8,
                            NameForProvider = "Livonia",
                            Version = "1.19.0"
                        },
                        new
                        {
                            Id = 16,
                            ImageExtension = "webp",
                            IsFirstQuadrant = false,
                            MapId = 2,
                            MapProviderId = 2,
                            MapTypeForProvider = "Sat",
                            MapTypeId = 2,
                            MaxMapLevel = 8,
                            NameForProvider = "Livonia",
                            Version = "1.19.0"
                        },
                        new
                        {
                            Id = 17,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = true,
                            MapId = 3,
                            MapProviderId = 2,
                            MapTypeForProvider = "Top",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "Namalsk",
                            Version = "0.1.0"
                        },
                        new
                        {
                            Id = 18,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = true,
                            MapId = 3,
                            MapProviderId = 2,
                            MapTypeForProvider = "Sat",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "Namalsk",
                            Version = "0.1.0"
                        },
                        new
                        {
                            Id = 19,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = true,
                            MapId = 4,
                            MapProviderId = 2,
                            MapTypeForProvider = "Top",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "Esseker",
                            Version = "1.1.0"
                        },
                        new
                        {
                            Id = 20,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = true,
                            MapId = 4,
                            MapProviderId = 2,
                            MapTypeForProvider = "Sat",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "Esseker",
                            Version = "1.1.0"
                        },
                        new
                        {
                            Id = 21,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = true,
                            MapId = 5,
                            MapProviderId = 2,
                            MapTypeForProvider = "Top",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "TakistanPlus",
                            Version = "1.1.0"
                        },
                        new
                        {
                            Id = 22,
                            ImageExtension = "jpg",
                            IsFirstQuadrant = true,
                            MapId = 5,
                            MapProviderId = 2,
                            MapTypeForProvider = "Sat",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "TakistanPlus",
                            Version = "1.1.0"
                        },
                        new
                        {
                            Id = 23,
                            ImageExtension = "webp",
                            IsFirstQuadrant = false,
                            MapId = 6,
                            MapProviderId = 2,
                            MapTypeForProvider = "Top",
                            MapTypeId = 1,
                            MaxMapLevel = 7,
                            NameForProvider = "Banov",
                            Version = "1.1.0"
                        },
                        new
                        {
                            Id = 24,
                            ImageExtension = "webp",
                            IsFirstQuadrant = false,
                            MapId = 6,
                            MapProviderId = 2,
                            MapTypeForProvider = "Sat",
                            MapTypeId = 2,
                            MaxMapLevel = 7,
                            NameForProvider = "Banov",
                            Version = "1.1.0"
                        });
                });

            modelBuilder.Entity("DayzMapsLoader.Domain.Entities.ProvidedMap", b =>
                {
                    b.HasOne("DayzMapsLoader.Domain.Entities.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DayzMapsLoader.Domain.Entities.MapProvider", "MapProvider")
                        .WithMany()
                        .HasForeignKey("MapProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DayzMapsLoader.Domain.Entities.MapType", "MapType")
                        .WithMany()
                        .HasForeignKey("MapTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("MapProvider");

                    b.Navigation("MapType");
                });
#pragma warning restore 612, 618
        }
    }
}
